# This file contains common pin mappings for RAMPS (v1.3 and later)
# boards. RAMPS boards typically use a firmware compiled for the AVR
# atmega2560 (though other AVR chips are also possible).

# See the example.cfg file for a description of available parameters.

[stepper_x]
step_pin: ar54
dir_pin: ar55
enable_pin: !ar38
step_distance: 0.01125
#endstop_pin: ^!ar3
endstop_pin: ^ar2
position_endstop: 150
position_max: 150
homing_speed: 50
homing_retract_dist: 2.0
homing_positive_dir: True

# Configure a TMC2208 (or TMC2224) stepper motor driver via single
# wire UART. To use this feature, define a config section with a
# "tmc2208" prefix followed by the name of the corresponding stepper
# config section (for example, "[tmc2208 stepper_x]").
[tmc2208 stepper_x]
uart_pin: ar64
#   The pin connected to the TMC2208 PDN_UART line. This parameter
#   must be provided.
#tx_pin: ar59
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
microsteps: 16
#   The number of microsteps to configure the driver to use. Valid
#   values are 1, 2, 4, 8, 16, 32, 64, 128, 256. This parameter must
#   be provided.
interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
run_current: 0.8
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.5
#   The amount of current (in amps) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
stealthchop_threshold: 90
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_BLANK_TIME_SELECT: 2
driver_TOFF: 4
driver_HEND: 1
driver_HSTRT: 1
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#   Set the given register during the configuration of the TMC2208
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.


[stepper_y]
step_pin: ar60
dir_pin: !ar61
enable_pin: !ar56
step_distance: 0.01312
#endstop_pin: ^!ar14
endstop_pin: ^ar15
position_endstop: 150
position_max: 150
homing_speed: 50
homing_retract_dist: 2.0
homing_positive_dir: True

# Configure a TMC2208 (or TMC2224) stepper motor driver via single
# wire UART. To use this feature, define a config section with a
# "tmc2208" prefix followed by the name of the corresponding stepper
# config section (for example, "[tmc2208 stepper_x]").
[tmc2208 stepper_y]
uart_pin: ar40
#   The pin connected to the TMC2208 PDN_UART line. This parameter
#   must be provided.
#tx_pin: ar63
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
microsteps: 16
#   The number of microsteps to configure the driver to use. Valid
#   values are 1, 2, 4, 8, 16, 32, 64, 128, 256. This parameter must
#   be provided.
interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
run_current: 0.8
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.5
#   The amount of current (in amps) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
stealthchop_threshold: 90
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_BLANK_TIME_SELECT: 2
driver_TOFF: 4
driver_HEND: 1
driver_HSTRT: 1
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#   Set the given register during the configuration of the TMC2208
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.


[stepper_z]
step_pin: ar46
dir_pin: ar48
enable_pin: !ar62
step_distance: 0.0003125
endstop_pin: ^ar18
#endstop_pin: ^ar19
position_endstop: 0.0
position_max: 150
homing_speed: 3
homing_retract_dist: 2.0
homing_positive_dir: False

# Configure a TMC2208 (or TMC2224) stepper motor driver via single
# wire UART. To use this feature, define a config section with a
# "tmc2208" prefix followed by the name of the corresponding stepper
# config section (for example, "[tmc2208 stepper_x]").
[tmc2208 stepper_z]
uart_pin: ar65
#   The pin connected to the TMC2208 PDN_UART line. This parameter
#   must be provided.
#tx_pin: ar42
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
microsteps: 16
#   The number of microsteps to configure the driver to use. Valid
#   values are 1, 2, 4, 8, 16, 32, 64, 128, 256. This parameter must
#   be provided.
interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
run_current: 0.5
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.3
#   The amount of current (in amps) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
stealthchop_threshold: 20
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_BLANK_TIME_SELECT: 2
driver_TOFF: 4
driver_HEND: 1
driver_HSTRT: 1
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#   Set the given register during the configuration of the TMC2208
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.


[extruder]
step_pin: ar26
dir_pin: !ar28
enable_pin: !ar24
step_distance: 0.00125
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_only_distance: 700.0
max_extrude_only_velocity: 100
max_extrude_only_accel: 800
heater_pin: ar10
max_power: 1.0
sensor_type: NTC 100K beta 3950
sensor_pin: analog13
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
smooth_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed to reduce the impact of measurement noise. The default
#   is 2 seconds.
min_extrude_temp: 0
min_temp: 0
max_temp: 250

[heater_bed]
heater_pin: ar8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: analog14
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
smooth_time: 2.0
min_temp: 0
max_temp: 130
max_power: 0.3

[fan]
pin: ar4
max_power: 1.0
shutdown_speed: 0.0
#cycle_time: 0.010
hardware_pwm: True
kick_start_time: 0.300

[mcu]
serial: /dev/serial/by-id/usb-Arduino__www.arduino.cc__Arduino_Mega_2560_8563530343335131F050-if00
pin_map: arduino
#baud: 250000
restart_method: arduino

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 1200
#acceleration_order: 6
#   This parameter determines the acceleration method. Use 2 for
#   constant acceleration, 4 for a 4th order position s-curve
#   acceleration, or 6 for 6th order position s-curve acceleration.
#   The default is 2.
#max_jerk: 300000
#   Maximum kinematic jerk (in mm/s^3). Notice this is not the same as
#   the max velocity jump which is sometimes configured by other firmware!
#   A safe reasonable starting value is around max_accel * 10, which is
#   the default.
max_z_velocity: 4
max_z_accel: 300
square_corner_velocity: 20.0


# EXTRAS

# Idle timeout. An idle timeout is automatically enabled - add an
# explicit idle_timeout config section to change the default settings.
[idle_timeout]
#gcode:
#   A list of G-Code commands (one per line) to execute on an idle
#   timeout. The default is to run "M84".
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

# Neopixel (aka WS2812) LED support (one may define any number of
# sections with a "neopixel" prefix). One may set the LED color via
# "SET_LED LED=status_pixel RED=0.1 GREEN=0.1 BLUE=0.1" type extended
# g-code commands.
[neopixel status_pixel]
pin: ar11
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count:1
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indices only a single
#   Neopixel is connected to the pin).
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The default for each color is 0.

# Heater and temperature sensor verification. Heater verification is
# automatically enabled for each heater that is configured on the
# printer. Use verify_heater sections to change the default settings.
[verify_heater extruder]
heating_gain: 1
#   The minimum temperature (in Celsius) that the heater must increase
#   by when approaching a new target temperature. The default is 2.
check_gain_time: 30
#   The amount of time (in seconds) that the heating_gain must be met
#   in before an error is raised. The default is 20 seconds for
#   extruders and 60 seconds for heater_bed.
hysteresis: 5
#   The difference between the target temperature and the current
#   temperature for the heater to be considered within range of the
#   target temperature. The default is 5.
max_error: 200
#   The maximum temperature difference a heater that falls outside the
#   target temperature range may accumulate before an error is
#   raised. For example, if the target temperature is 200, the
#   hysteresis is 5, the max_error is 120, and the temperature is
#   reported at 185 degrees for 12 seconds then an error would be
#   raised (or 24 seconds at 190, or 120 seconds at 194, etc.). The
#   default is 120.

# A virtual sdcard may be useful if the host machine is not fast
# enough to run OctoPrint well. It allows the Klipper host software to
# directly print gcode files stored in a directory on the host using
# standard sdcard G-Code commands (eg, M24).
[virtual_sdcard]
path: ~/.octoprint/uploads/
#   The path of the local directory on the host machine to look for
#   g-code files. This is a read-only directory (sdcard file writes
#   are not supported). One may point this to OctoPrint's upload
#   directory (generally ~/.octoprint/uploads/ ). This parameter must
#   be provided.

# Common EXP1 / EXP2 (display) pins
[board_pins]
aliases:
    # Common EXP1 header found on many "all-in-one" ramps clones
    EXP1_1=ar37, EXP1_3=ar17, EXP1_5=ar23, EXP1_7=ar27, EXP1_9=<GND>,
    EXP1_2=ar35, EXP1_4=ar16, EXP1_6=ar25, EXP1_8=ar29, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=ar50, EXP2_3=ar31, EXP2_5=ar33, EXP2_7=ar49, EXP2_9=<GND>,
    EXP2_2=ar52, EXP2_4=ar53, EXP2_6=ar51, EXP2_8=ar41, EXP2_10=<RST>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi"
    # Note, some boards wire: EXP2_8=<RST>, EXP2_10=ar41
	
# "RepRapDiscount 128x64 Full Graphic Smart Controller" type displays
[display]
lcd_type: st7920
cs_pin: EXP1_4
sclk_pin: EXP1_5
sid_pin: EXP1_3
encoder_pins: ^EXP2_3, ^EXP2_5
click_pin: ^!EXP1_2
#kill_pin: ^!EXP2_8

# timeout in seconds, leave it out if not needed
menu_timeout: 60
# to use menu you have to specify root menu entry
# for stock statusscreen and menu use `main`
# for custom statusscreen use `infoscreen`
#menu_root: __main
# this option allows to run menu immediately at startup.
# use it for custom statusscreen
#menu_autorun: yes
#
#rows:
#   Only needed when using display with custom row count [Optional].
#cols:
#   Only needed when using display with custom column count [Optional].
encoder_pins: ^ar31, ^ar33
#   The pins connected to encoder. 2 pins must be provided when 
#   using encoder. This parameter must be provided when using menu.
click_pin: ^!ar35
#   The pin connected to 'enter' button or encoder 'click'. This parameter
#   must be provided when using menu.
#back_pin:
#   The pin connected to 'back' button [Optional].
#up_pin:
#   The pin connected to 'up' button. This parameter must be provided 
#   when using menu without encoder.
#down_pin:
#   The pin connected to 'down' button. This parameter must be provided 
#   when using menu without encoder.
kill_pin: ^!ar41
#   The pin connected to 'kill' button. This button will call 
#   emergency stop.
	
[heater_fan hotendFan]
pin: ar5
max_power: 1.0
shutdown_speed: 0.0
#cycle_time: 0.010
hardware_pwm: True
kick_start_time: 0.300
#   See the "fan" section in example.cfg for a description of the
#   above parameters.
heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with.  The default is "extruder".
heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0

[output_pin buzzer]
pin: EXP1_1
	
[gcode_macro BEEP_PRINT_STARTED]
gcode:
	SET_PIN PIN=buzzer VALUE=1
	SET_PIN PIN=buzzer VALUE=0
	SET_PIN PIN=buzzer VALUE=1
	SET_PIN PIN=buzzer VALUE=0

[gcode_macro BEEP_PRINT_FINISHED]
gcode:
	SET_PIN PIN=buzzer VALUE=1
	G4 P300
	SET_PIN PIN=buzzer VALUE=0

# Run-time configurable output pins (one may define any number of
# sections with an "output_pin" prefix). Pins configured here will be
# setup as output pins and one may modify them at run-time using the
# "SET_PIN PIN=my_pin VALUE=.1" extended g-code command.
[output_pin caseLightPin]
pin: ar6
#   The pin to configure as an output. This parameter must be
#   provided.
pwm: True
#   Set if the output pin should be capable of
#   pulse-width-modulation. If this is true, the value fields should
#   be between 0 and 1; if it is false the value fields should be
#   either 0 or 1. The default is False.
#static_value:
#   If this is set, then the pin is assigned to this value at startup
#   and the pin can not be changed during runtime. A static pin uses
#   slightly less ram in the micro-controller. The default is to use
#   runtime configuration of pins.
value: 1.0
#   The value to initially set the pin to during MCU
#   configuration. The default is 0 (for low voltage).
#shutdown_value:
#   The value to set the pin to on an MCU shutdown event. The default
#   is 0 (for low voltage).
cycle_time: 0.010
#   The amount of time (in seconds) per PWM cycle. It is recommended
#   this be 10 milliseconds or greater when using software based
#   PWM. The default is 0.100 seconds for pwm pins.
hardware_pwm: True
#   Enable this to use hardware PWM instead of software PWM. The
#   default is False.
#scale:
#   This parameter can be used to alter how the 'value' and
#   'shutdown_value' parameters are interpreted for pwm pins. If
#   provided, then the 'value' parameter should be between 0.0 and
#   'scale'. This may be useful when configuring a PWM pin that
#   controls a stepper voltage reference. The 'scale' can be set to
#   the equivalent stepper amperage if the PWM were fully enabled, and
#   then the 'value' parameter can be specified using the desired
#   amperage for the stepper. The default is to not scale the 'value'
#   parameter.

# Z height probe. One may define this section to enable Z height
# probing hardware. When this section is enabled, PROBE and
# QUERY_PROBE extended g-code commands become available. The probe
# section also creates a virtual probe:z_virtual_endstop pin. One may
# set the stepper_z endstop_pin to this virtual pin on cartesian style
# printers that use the probe in place of a z endstop.
[probe]
pin: !ar19
#   Probe detection pin. This parameter must be provided.
z_offset: 2.0
#   The distance (in mm) between the bed and the nozzle when the probe
#   triggers. This parameter must be provided.
x_offset: -22.0
#   The distance (in mm) between the probe and the nozzle along the
#   x-axis. The default is 0.
y_offset: 0.875
#   The distance (in mm) between the probe and the nozzle along the
#   y-axis. The default is 0.
speed: 3.0
#   Speed (in mm/s) of the Z axis when probing. The default is 5mm/s.
#activate_gcode:
#   A list of G-Code commands (one per line) to execute prior to each
#   probe attempt. This may be useful if the probe needs to be
#   activated in some way. The default is to not run any special
#   G-Code commands on activation.
#deactivate_gcode:
#   A list of G-Code commands (one per line) to execute after each
#   probe attempt completes. The default is to not run any special
#   G-Code commands on deactivation.

# Mesh Bed Leveling.  One may define a [bed_mesh] config section
# to enable move transformations that offset the z axis based
# on a mesh generated from probed points.  Note that bed_mesh
# and bed_tilt are incompatible, both cannot be defined.
[bed_mesh]
#speed: 50
#   The speed (in mm/s) of non-probing moves during the
#   calibration. The default is 50.
#horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
min_point: 20,10
#   An X,Y point defining the minimum coordinate to probe on
#   the bed.  Note that this refers to the nozzle position,
#   and take care that you do not define a point that will move
#   the probe off of the bed.  This parameter must be provided.
max_point: 140,130
#   An X,Y point defining the maximum coordinate to probe on
#   the bed.  Follow the same precautions as listed in min_point.
#   Also note that this does not necessarily define the last point
#   probed, only the maximum coordinate.  This parameter must be provided.
probe_count: 4,4
#   A comma separated pair of integer values (X,Y) defining the number
#   of points to probe along each axis. A single value is also valid,
#   in which case that value will be for both axes.  Default is 3,3
#   which probes a 3x3 grid.
#fade_start: 1.0
#   The z-axis position in which to start phasing z-adjustment out.
#   Default is 1.0.
#fade_end: 10.0
#   The z-axis position in which phase out is complete.  If this
#   value is less than or equal to fade_start then phasing out
#   is disabled. Default is 10.0.
#split_delta_z: .025
#   The amount of Z difference (in mm) along a move that will
#   trigger a split.  Default is .025.
#move_check_distance: 5.0
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
#mesh_pps: 2,2
#   A comma separated pair of integers (X,Y) defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed
#   point.  The user may enter a single value which will be applied
#   to both axes.  Default is 2,2.
algorithm: lagrange
#   The interpolation algorthm to use.  May be either "langrange"
#   or "bicubic".  This option will not affect 3x3 grids, which
#   are forced to use lagrange sampling.  Default is lagrange.
#bicubic_tension: .2
#   When using the bicubic algoritm the tension parameter above
#   may be applied to change the amount of slope interpolated.
#   Larger numbers will increase the amount of slope, which
#   results in more curvature in the mesh. Default is .2.