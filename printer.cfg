# This file contains common pin mappings for RAMPS (v1.3 and later)
# boards. RAMPS boards typically use a firmware compiled for the AVR
# atmega2560 (though other AVR chips are also possible).

# See the example.cfg file for a description of available parameters.

[stepper_x]
step_pin: ar54
dir_pin: ar55
enable_pin: !ar38
step_distance: 0.01125
#endstop_pin: ^!ar3
endstop_pin: ^ar2
position_endstop: 150
position_max: 150
homing_speed: 50
homing_retract_dist: 2.0
homing_positive_dir: True

[stepper_y]
step_pin: ar60
dir_pin: !ar61
enable_pin: !ar56
step_distance: 0.01312
#endstop_pin: ^!ar14
endstop_pin: ^ar15
position_endstop: 150
position_max: 150
homing_speed: 50
homing_retract_dist: 2.0
homing_positive_dir: True

[stepper_z]
step_pin: ar46
dir_pin: ar48
enable_pin: !ar62
step_distance: 0.0003125
endstop_pin: ^ar18
#endstop_pin: ^ar19
position_endstop: 0.0
position_max: 150
homing_speed: 5
homing_retract_dist: 2.0
homing_positive_dir: False

[extruder]
step_pin: ar26
dir_pin: !ar28
enable_pin: !ar24
step_distance: 0.0043
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_only_distance: 700.0
max_extrude_only_velocity: 100
max_extrude_only_accel: 10000
pressure_advance: 3.5
pressure_advance_lookahead_time: 0.010
heater_pin: ar10
max_power: 1.0
sensor_type: NTC 100K beta 3950
sensor_pin: analog13
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
smooth_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed to reduce the impact of measurement noise. The default
#   is 2 seconds.
min_extrude_temp: 0
min_temp: 0
max_temp: 250

[fan]
pin: ar4
max_power: 1.0
shutdown_speed: 0.0
#cycle_time: 0.010
hardware_pwm: True
kick_start_time: 0.300

[mcu]
serial: /dev/ttyACM0
pin_map: arduino
#baud: 250000
restart_method: arduino

[printer]
kinematics: cartesian
max_velocity: 250
max_accel: 1500
max_z_velocity: 7
max_z_accel: 100
square_corner_velocity: 5.0


# EXTRAS

# Idle timeout. An idle timeout is automatically enabled - add an
# explicit idle_timeout config section to change the default settings.
[idle_timeout]
#gcode:
#   A list of G-Code commands (one per line) to execute on an idle
#   timeout. The default is to run "M84".
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.


# Heater and temperature sensor verification. Heater verification is
# automatically enabled for each heater that is configured on the
# printer. Use verify_heater sections to change the default settings.
[verify_heater extruder]
heating_gain: 1
#   The minimum temperature (in Celsius) that the heater must increase
#   by when approaching a new target temperature. The default is 2.
check_gain_time: 30
#   The amount of time (in seconds) that the heating_gain must be met
#   in before an error is raised. The default is 20 seconds for
#   extruders and 60 seconds for heater_bed.
hysteresis: 5
#   The difference between the target temperature and the current
#   temperature for the heater to be considered within range of the
#   target temperature. The default is 5.
max_error: 200
#   The maximum temperature difference a heater that falls outside the
#   target temperature range may accumulate before an error is
#   raised. For example, if the target temperature is 200, the
#   hysteresis is 5, the max_error is 120, and the temperature is
#   reported at 185 degrees for 12 seconds then an error would be
#   raised (or 24 seconds at 190, or 120 seconds at 194, etc.). The
#   default is 120.

# A virtual sdcard may be useful if the host machine is not fast
# enough to run OctoPrint well. It allows the Klipper host software to
# directly print gcode files stored in a directory on the host using
# standard sdcard G-Code commands (eg, M24).
[virtual_sdcard]
path: ~/.octoprint/uploads/
#   The path of the local directory on the host machine to look for
#   g-code files. This is a read-only directory (sdcard file writes
#   are not supported). One may point this to OctoPrint's upload
#   directory (generally ~/.octoprint/uploads/ ). This parameter must
#   be provided.

# "RepRapDiscount 128x64 Full Graphic Smart Controller" type displays
[display]
lcd_type: st7920
cs_pin: ar16
sclk_pin: ar23
sid_pin: ar17

# timeout in seconds, leave it out if not needed
menu_timeout: 60
# to use menu you have to specify root menu entry
# for stock statusscreen and menu use `main`
# for custom statusscreen use `infoscreen`
menu_root: __main
# this option allows to run menu immediately at startup.
# use it for custom statusscreen
#menu_autorun: yes
#
#rows:
#   Only needed when using display with custom row count [Optional].
#cols:
#   Only needed when using display with custom column count [Optional].
encoder_pins: ^ar31, ^ar33
#   The pins connected to encoder. 2 pins must be provided when 
#   using encoder. This parameter must be provided when using menu.
click_pin: ^!ar35
#   The pin connected to 'enter' button or encoder 'click'. This parameter
#   must be provided when using menu.
#back_pin:
#   The pin connected to 'back' button [Optional].
#up_pin:
#   The pin connected to 'up' button. This parameter must be provided 
#   when using menu without encoder.
#down_pin:
#   The pin connected to 'down' button. This parameter must be provided 
#   when using menu without encoder.
kill_pin: ^!ar41
#   The pin connected to 'kill' button. This button will call 
#   emergency stop.


### DEFAULT MENU ###

### menu main ###

[menu __main]
type: list
name: Main Menu
items:
    __octoprint
    __sdcard
    __control
    __temp
    __filament
    __prepare

### menu octoprint ###
[menu __octoprint]
type: list
name: OctoPrint
items:
    .__pause
    .__resume
    .__abort

[menu __octoprint __pause]
type: command
enable: toolhead.is_printing
name: Pause printing
action: respond action:pause
gcode:

[menu __octoprint __resume]
type: command
enable: toolhead.is_printing
name: Resume printing
action: respond action:resume
gcode:

[menu __octoprint __abort]
type: command
enable: toolhead.is_printing
name: Abort printing
action: respond action:cancel
gcode:

### menu virtual sdcard ###

[menu __sdcard]
type: vsdcard
name: Virutal SD Card
items:
    .__start
    .__resume
    .__pause

[menu __sdcard __start]
type: command
enable: !toolhead.is_printing
name: Start printing
gcode: M24

[menu __sdcard __resume]
type: command
enable: toolhead.is_printing
name: Resume printing
gcode: M24

[menu __sdcard __pause]
type: command
enable: toolhead.is_printing
name: Pause printing
gcode: M25

### menu control ###

[menu __control]
type: list
name: Control
items:
    .__home
    .__homez
    .__homexy
    .__move_10mm
    .__move_1mm
    .__move_01mm
    .__disable
    .__fanonoff
    .__fanspeed
    .__caselightonoff
    .__caselightpwm

[menu __control __home]
type: command
name: Home All
gcode: G28
enable: !toolhead.is_printing

[menu __control __homez]
type: command
enable: !toolhead.is_printing
name: Home Z
gcode: G28 Z

[menu __control __homexy]
type: command
enable: !toolhead.is_printing
name: Home X/Y
gcode: G28 X Y

[menu __control __disable]
type: command
name: Disable steppers
gcode:
    M84
    M18

[menu __control __fanonoff]
type: input
enable: fan.is_enabled
name: Fan {1:3s}
parameter: fan.speed
transform:
    choose('OFF','ON')
    choose(0,255)
input_min: 0
input_max: 1
input_step: 1
gcode: M106 S{2:d}

[menu __control __fanspeed]
type: input
enable: fan.is_enabled
name: Fan speed: {1:3d}%
parameter: fan.speed
transform:
    map(0,1,0,100)
    map(0,1,0,255)
input_min: 0
input_max: 1
input_step: 0.01
gcode: M106 S{2:d}

[menu __control __caselightonoff]
type: input
enable: output_pin.caselight.is_enabled
name: Case light: {1:3s}
parameter: output_pin.caselight.value
transform:
    choose('OFF','ON')
    choose(0,1)
input_min: 0
input_max: 1
input_step: 1
gcode: SET_PIN PIN=caselight VALUE={2}

[menu __control __caselightpwm]
type: input
enable: output_pin.caselight.is_enabled
name: Case light: {0:4.0%}
parameter: output_pin.caselight.value
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode: SET_PIN PIN=caselight VALUE={0:.2f}

### menu move 10mm ###

[menu __control __move_10mm]
type: list
enable: !toolhead.is_printing
name: Move 10mm
items:
    .__axis_z
    .__axis_x, .__axis_y
    .__axis_e

[menu __control __move_10mm __axis_x]
type: input
name: "X:{0:05.1f} "
parameter: toolhead.xpos
input_min: 0
input_max: 200.0
input_step: 10.0
gcode: G1 X{0:.1f}

[menu __control __move_10mm __axis_y]
type: input
name: "Y:{0:05.1f} "
parameter: toolhead.ypos
input_min: 0
input_max: 200.0
input_step: 10.0
gcode: G1 Y{0:.1f}

[menu __control __move_10mm __axis_z]
type: input
enable: !toolhead.is_printing
name: "Move Z:{0:05.1f}"
parameter: toolhead.zpos
input_min: 0
input_max: 200.0
input_step: 10.0
gcode: G1 Z{0:.1f}

[menu __control __move_10mm __axis_e]
type: input
enable: !toolhead.is_printing
name: "Move E:{0:+06.1f}"
parameter: 0
input_min: -250.0
input_max: 250.0
input_step: 10.0
gcode: G1 E{0:.1f} F800

### menu move 1mm ###

[menu __control __move_1mm]
type: list
enable: !toolhead.is_printing
name: Move 1mm
items:
    .__axis_z
    .__axis_x, .__axis_y
    .__axis_e

[menu __control __move_1mm __axis_x]
type: input
name: "X:{0:05.1f} "
parameter: toolhead.xpos
input_min: 0
input_max: 100.0
input_step: 1.0
gcode: G1 X{0:.1f}

[menu __control __move_1mm __axis_y]
type: input
name: "Y:{0:05.1f} "
parameter: toolhead.ypos
input_min: 0
input_max: 100.0
input_step: 1.0
gcode: G1 Y{0:.1f}

[menu __control __move_1mm __axis_z]
type: input
enable: !toolhead.is_printing
name: "Move Z:{0:05.1f}"
parameter: toolhead.zpos
input_min: 0
input_max: 100.0
input_step: 1.0
gcode: G1 Z{0:.1f}

[menu __control __move_1mm __axis_e]
type: input
enable: !toolhead.is_printing
name: "Move E:{0:+06.1f}"
parameter: 0
input_min: -100.0
input_max: 100.0
input_step: 1.0
gcode: G1 E{0:.1f} F800

### menu move 0.1mm ###

[menu __control __move_01mm]
type: list
enable: !toolhead.is_printing
name: Move 0.1mm
items:
    .__axis_z
    .__axis_x, .__axis_y
    .__axis_e

[menu __control __move_01mm __axis_x]
type: input
name: "X:{0:05.1f} "
parameter: toolhead.xpos
input_min: 0
input_max: 50.0
input_step: 0.1
gcode: G1 X{0:.1f}

[menu __control __move_01mm __axis_y]
type: input
name: "Y:{0:05.1f} "
parameter: toolhead.ypos
input_min: 0
input_max: 50.0
input_step: 0.1
gcode: G1 Y{0:.1f}

[menu __control __move_01mm __axis_z]
type: input
enable: !toolhead.is_printing
name: "Move Z:{0:05.1f}"
parameter: toolhead.zpos
input_min: 0
input_max: 50.0
input_step: 0.1
gcode: G1 Z{0:.1f}

[menu __control __move_01mm __axis_e]
type: input
enable: !toolhead.is_printing
name: "Move E:{0:+06.1f}"
parameter: 0
input_min: -50.0
input_max: 50.0
input_step: 0.1
gcode: G1 E{0:.1f} F800

### menu temperature ###

[menu __temp]
type: list
name: Temperature
items:
    .__hotend0_current, .__hotend0_target
    .__hotend1_current, .__hotend1_target
    .__hotbed_current, .__hotbed_target
    .__preheat_pla
    .__cooldown

[menu __temp __hotend0_current]
type: item
enable: extruder0.is_enabled
name: "Ex. 0:{0:4.0f} T"
parameter: extruder0.temperature

[menu __temp __hotend0_target]
type: input
enable: extruder0.is_enabled
name: "Ex. 0 ->{0:4.0f}"
parameter: extruder0.target
input_min: 0
input_max: 250
input_step: 1
gcode: M104 T0 S{0:.0f}

[menu __temp __hotend1_current]
type: item
enable: extruder1.is_enabled
name: "Ex. 1:{0:4.0f} T"
parameter: extruder1.temperature

[menu __temp __hotend1_target]
type: input
enable: extruder1.is_enabled
name: "Ex. 1 ->{0:4.0f}"
parameter: extruder1.target
input_min: 0
input_max: 250
input_step: 1
gcode: M104 T1 S{0:.0f}

[menu __temp __hotbed_current]
type: item
enable: heater_bed.is_enabled
name: "Bed:{0:4.0f} T"
parameter: heater_bed.temperature

[menu __temp __hotbed_target]
type: input
enable: heater_bed.is_enabled
name: "{0:4.0f}"
parameter: heater_bed.target
input_min: 0
input_max: 130
input_step: 1
gcode: M140 S{0:.0f}

[menu __temp __preheat_pla]
type: list
name: Preheat PLA
items:
    .__all
    .__hotend
    .__hotbed

[menu __temp __preheat_pla __all]
type: command
enable: extruder0.is_enabled,heater_bed.is_enabled
name: Preheat all
gcode:
    M140 S60
    M104 S200

[menu __temp __preheat_pla __hotend]
type: command
enable: extruder0.is_enabled
name: Preheat hotend
gcode: M104 S200

[menu __temp __preheat_pla __hotbed]
type: command
enable: heater_bed.is_enabled
name: Preheat hotbed
gcode: M140 S60

[menu __temp __cooldown]
type: list
name: Cooldown
items:
    .__all
    .__hotend
    .__hotbed

[menu __temp __cooldown __all]
type: command
enable: extruder0.is_enabled,heater_bed.is_enabled
name: Cooldown all
gcode:
    M104 S0
    M140 S0

[menu __temp __cooldown __hotend]
type: command
enable: extruder0.is_enabled
name: Cooldown hotend
gcode: M104 S0

[menu __temp __cooldown __hotbed]
type: command
enable: heater_bed.is_enabled
name: Cooldown hotbed
gcode: M140 S0

### menu filament ###

[menu __filament]
type: list
name: Filament
items:
    __temp __hotend0_current, __temp __hotend0_target
    .__unload
    .__load
    .__feed

[menu __filament __load]
type: command
name: Load Filament
gcode:
    G1 E600 F1300
    G1 E100 F300

[menu __filament __unload]
type: command
name: Unload Filament
gcode:
    G1 E-200 F1000
    G1 E-500 F1800

[menu __filament __feed]
type: input
name: Feed Filament: {0:.1f}
parameter: toolhead.epos
input_step: 0.1
gcode: G1 E{0:.1f} F30

### menu prepare ###
[menu __prepare]
type: list
enable: !toolhead.is_printing
name: Prepare
items:
    .__bedprobe
    .__hotend_pid_tuning
    .__hotbed_pid_tuning
    .__host_restart
    .__firmware_restart

[menu __prepare __host_restart]
type: command
enable: !toolhead.is_printing
name: Restart host
gcode: RESTART

[menu __prepare __firmware_restart]
type: command
enable: !toolhead.is_printing
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __prepare __bedprobe]
type: command
enable: !toolhead.is_printing
name: Bed probe
gcode: PROBE

[menu __prepare __hotend_pid_tuning]
type: command
enable: !toolhead.is_printing, extruder0.is_enabled
name: Tune Hotend PID
gcode: PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __prepare __hotbed_pid_tuning]
type: command
enable: !toolhead.is_printing, heater_bed.is_enabled
name: Tune Hotbed PID
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

### deck cards ###

### special characters for hd44780
# \x00 - thermometer
# \x01 - heater_bed
# \x02 - speed_factor
# \x03 - clock
# \x04 - degrees
# \x05 - usb
# \x06 - sdcard
# \x7e - right arrow

[menu __card2004_static]
type: card
name: Card 20x04
content:
    "\x00{0:3s}\x04\x7e{1:3s}\x04   {2}"
    "\x01{3:3s}\x04\x7e{4:3s}\x04   \xa5{8}"
    "fn{6} \x02{5} {7}"
    "{9}"
items:
    __card_hotend0_current
    __card_hotend0_target
    __card_zpos
    __card_hotbed_current
    __card_hotbed_target
    __card_frpeed
    __card_fnspeed
    5,__card_prt_time, __card_usb_progress, __card_sdcard_progress
    __card_status
    __card_msg,__card_xpos|__card_ypos|__card_epos

[menu __card1604_static]
type: card
name: Card 16x04
content:
    "E{0:3s}/{1:3s} {2}"
    "B{3:3s}/{4:3s} fr{5}"
    "fn{6}   {7}"
    "[{8}] {9}"
items:
    __card_hotend0_current
    __card_hotend0_target
    __card_zpos
    __card_hotbed_current
    __card_hotbed_target
    __card_frpeed
    __card_fnspeed
    5,__card_prt_time_2, __card_usb_progress_2, __card_sdcard_progress_2
    __card_status_slim
    __card_msg_slim,__card_xpos|__card_ypos

[menu __card2004_input]
type: card
name: Card 20x04
content:
    "\x00{0:3s}\x04\x7e{1:3s}\x04   {2}"
    "\x01{3:3s}\x04\x7e{4:3s}\x04   \xa5{8}"
    "fn{6} \x02{5} {7}"
    "{9}"
items:
    __card_hotend0_current
    __card_hotend0_target_in
    __card_zpos
    __card_hotbed_current
    __card_hotbed_target_in
    __card_frpeed_in
    __card_fnspeed
    5,__card_prt_time, __card_usb_progress, __card_sdcard_progress
    __card_status
    __card_msg,__card_xpos|__card_ypos|__card_epos

[menu __card1604_input]
type: card
name: Card 16x04
content:
    "E{0:3s}/{1:3s} {2}"
    "B{3:3s}/{4:3s} fr{5}"
    "fn{6}   {7}"
    "[{8}] {9}"
items:
    __card_hotend0_current
    __card_hotend0_target_in
    __card_zpos
    __card_hotbed_current
    __card_hotbed_target_in
    __card_frpeed_in
    __card_fnspeed
    5,__card_prt_time_2, __card_usb_progress_2, __card_sdcard_progress_2
    __card_status_slim
    __card_msg,__card_xpos|__card_ypos

[menu __card1]
type: card
name: Card 1
content:
    "E0:{0:3s}/{1:3s} B:{4:3s}/{5:3s}"
    "E1:{2:3s}/{3:3s} {6}"
    "Fr{7}Fn{8} {9}"
    "{10}"

items:
    __card_hotend0_current
    __card_hotend0_target
    __card_hotend1_current
    __card_hotend1_target
    __card_hotbed_current
    __card_hotbed_target
    __card_zpos
    __card_frpeed_in
    __card_fnspeed_in
    5,__card_prt_time, __card_usb_progress, __card_sdcard_progress
    __card_msg

[menu __card2]
type: card
name: Card 2
content:
    "E:{0:3s}/{1:3s} B:{2:3s}/{3:3s}"
    "{4}{5}{6}"
    "Fr{7} {8} T{9}"
    "{10}"
items:
    __card_hotend0_current
    __card_hotend0_target
    __card_hotbed_current
    __card_hotbed_target
    __card_xpos
    __card_ypos
    __card_zpos
    __card_frpeed_in
    __card_usb_progress_2, __card_sdcard_progress_2
    __card_prt_time_2
    __card_msg

### card items ###

[menu __card_hotend0_current]
type: item
enable: extruder0.is_enabled
name: "{1:3.0f}"
parameter: extruder0.temperature
transform: abs()

[menu __card_hotend0_target]
type: item
enable: extruder0.is_enabled
name: "{1:3.0f}"
parameter: extruder0.target
transform: abs()

[menu __card_hotend0_target_in]
type: input
enable: extruder0.is_enabled
name: "{1:3.0f}"
parameter: extruder0.target
transform: abs()
input_min: 0
input_max: 250
input_step: 1
gcode: M104 T0 S{0:.0f}

[menu __card_hotend1_current]
type: item
enable: extruder1.is_enabled
name: "{1:3.0f}"
parameter: extruder1.temperature
transform: abs()

[menu __card_hotend1_target]
type: item
enable: extruder1.is_enabled
name: "{1:3.0f}"
parameter: extruder1.target
transform: abs()

[menu __card_hotend1_target_in]
type: input
enable: extruder1.is_enabled
name: "{1:3.0f}"
parameter: extruder1.target
transform: abs()
input_min: 0
input_max: 250
input_step: 1
gcode: M104 T1 S{0:.0f}

[menu __card_hotbed_current]
type: item
enable: heater_bed.is_enabled
name: "{1:3.0f}"
parameter: heater_bed.temperature
transform: abs()

[menu __card_hotbed_target]
type: item
enable: heater_bed.is_enabled
name: "{1:3.0f}"
parameter: heater_bed.target
transform: abs()

[menu __card_hotbed_target_in]
type: input
enable: heater_bed.is_enabled
name: "{1:3.0f}"
parameter: heater_bed.target
transform: abs()
input_min: 0
input_max: 250
input_step: 1
gcode: M140 S{0:.0f}

[menu __card_zpos]
type: item
name: "Z{0:06.2f}"
parameter: toolhead.zpos

[menu __card_xpos]
type: item
name: "X{0:05.1f}{2}"
parameter: toolhead.xpos, menu.is20xx
transform:
    1.choose('',' ')

[menu __card_ypos]
type: item
name: "Y{0:05.1f}{2}"
parameter: toolhead.ypos, menu.is20xx
transform:
    1.choose('',' ')

[menu __card_epos]
type: item
name: "E{0:05.1f}{2}"
parameter: toolhead.epos, menu.is20xx
transform:
    1.choose('',' ')

[menu __card_frpeed]
type: item
name: "{0:4.0%}"
parameter: gcode.speed_factor

[menu __card_fnspeed]
type: item
name: "{0:4.0%}"
parameter: fan.speed

[menu __card_frpeed_in]
type: input
name: "{0:4.0%}"
parameter: gcode.speed_factor
transform:
    map(0,1,0,255)
input_min: 0
input_max: 1
input_step: 0.01
gcode: M220 S{1:d}

[menu __card_fnspeed_in]
type: input
enable: fan.is_enabled
name: "{0:4.0%}"
parameter: fan.speed
transform:
    map(0,1,0,255)
input_min: 0
input_max: 1
input_step: 0.01
gcode: M106 S{1:d}

[menu __card_prt_time]
type: item
name: "\x03{1:02d}:{2:02d}"
transform:
    minutes()
    seconds()
parameter: toolhead.printing_time

[menu __card_prt_time_2]
type: item
name: "T{1:02d}:{2:02d}"
transform:
    minutes()
    seconds()
parameter: toolhead.printing_time

[menu __card_usb_progress]
type: item
enable: !virtual_sdcard.progress, display.progress
name: "\x05{0:3.0f}%"
parameter: display.progress

[menu __card_sdcard_progress]
type: item
enable: virtual_sdcard.is_enabled, virtual_sdcard.progress
name: "\x06{0:3.0f}%"
parameter: virtual_sdcard.progress

[menu __card_usb_progress_2]
type: item
#enable: !virtual_sdcard.progress,display.progress
name: "pr{0:3.0f}%"
parameter: display.progress

[menu __card_sdcard_progress_2]
type: item
enable: virtual_sdcard.is_enabled, virtual_sdcard.progress
name: "pr{0:3.0f}%"
parameter: virtual_sdcard.progress

[menu __card_msg]
enable: display.message
type: item
scroll: true
width: 20
name: "{0}"
parameter: display.message

[menu __card_msg_slim]
enable: display.message
type: item
scroll: true
width: 12
name: "{0}"
parameter: display.message

[menu __card_status]
type: item
name: "{0}"
width: 5
parameter: toolhead.status

[menu __card_status_slim]
type: item
name: "{0}"
width: 1
parameter: toolhead.status

	

# Z height probe. One may define this section to enable Z height
# probing hardware. When this section is enabled, PROBE and
# QUERY_PROBE extended g-code commands become available. The probe
# section also creates a virtual probe:z_virtual_endstop pin. One may
# set the stepper_z endstop_pin to this virtual pin on cartesian style
# printers that use the probe in place of a z endstop.
[probe]
pin: !ar19
#   Probe detection pin. This parameter must be provided.
z_offset: 3.1
#   The distance (in mm) between the bed and the nozzle when the probe
#   triggers. This parameter must be provided.
x_offset: -22.0
#   The distance (in mm) between the probe and the nozzle along the
#   x-axis. The default is 0.
y_offset: 0.875
#   The distance (in mm) between the probe and the nozzle along the
#   y-axis. The default is 0.
speed: 5.0
#   Speed (in mm/s) of the Z axis when probing. The default is 5mm/s.
#activate_gcode:
#   A list of G-Code commands (one per line) to execute prior to each
#   probe attempt. This may be useful if the probe needs to be
#   activated in some way. The default is to not run any special
#   G-Code commands on activation.
#deactivate_gcode:
#   A list of G-Code commands (one per line) to execute after each
#   probe attempt completes. The default is to not run any special
#   G-Code commands on deactivation.

[heater_fan hotendFan]
pin: ar5
max_power: 1.0
shutdown_speed: 0.0
#cycle_time: 0.010
hardware_pwm: True
kick_start_time: 0.300
#   See the "fan" section in example.cfg for a description of the
#   above parameters.
heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with.  The default is "extruder".
heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0

[output_pin buzzer]
pin: ar37
	
[gcode_macro BEEP_PRINT_STARTED]
gcode:
	SET_PIN PIN=buzzer VALUE=1
	SET_PIN PIN=buzzer VALUE=0
	SET_PIN PIN=buzzer VALUE=1
	SET_PIN PIN=buzzer VALUE=0

[gcode_macro BEEP_PRINT_FINISHED]
gcode:
	SET_PIN PIN=buzzer VALUE=1
	G4 P300
	SET_PIN PIN=buzzer VALUE=0

# Run-time configurable output pins (one may define any number of
# sections with an "output_pin" prefix). Pins configured here will be
# setup as output pins and one may modify them at run-time using the
# "SET_PIN PIN=my_pin VALUE=.1" extended g-code command.
[output_pin caseLightPin]
pin: ar6
#   The pin to configure as an output. This parameter must be
#   provided.
pwm: True
#   Set if the output pin should be capable of
#   pulse-width-modulation. If this is true, the value fields should
#   be between 0 and 1; if it is false the value fields should be
#   either 0 or 1. The default is False.
#static_value:
#   If this is set, then the pin is assigned to this value at startup
#   and the pin can not be changed during runtime. A static pin uses
#   slightly less ram in the micro-controller. The default is to use
#   runtime configuration of pins.
value: 1.0
#   The value to initially set the pin to during MCU
#   configuration. The default is 0 (for low voltage).
#shutdown_value:
#   The value to set the pin to on an MCU shutdown event. The default
#   is 0 (for low voltage).
cycle_time: 0.010
#   The amount of time (in seconds) per PWM cycle. It is recommended
#   this be 10 milliseconds or greater when using software based
#   PWM. The default is 0.100 seconds for pwm pins.
hardware_pwm: True
#   Enable this to use hardware PWM instead of software PWM. The
#   default is False.
#scale:
#   This parameter can be used to alter how the 'value' and
#   'shutdown_value' parameters are interpreted for pwm pins. If
#   provided, then the 'value' parameter should be between 0.0 and
#   'scale'. This may be useful when configuring a PWM pin that
#   controls a stepper voltage reference. The 'scale' can be set to
#   the equivalent stepper amperage if the PWM were fully enabled, and
#   then the 'value' parameter can be specified using the desired
#   amperage for the stepper. The default is to not scale the 'value'
#   parameter.

# Mesh Bed Leveling.  One may define a [bed_mesh] config section
# to enable move transformations that offset the z axis based
# on a mesh generated from probed points.  Note that bed_mesh
# and bed_tilt are incompatible, both cannot be defined.
[bed_mesh]
#speed: 50
#   The speed (in mm/s) of non-probing moves during the
#   calibration. The default is 50.
#horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
min_point: 20,10
#   An X,Y point defining the minimum coordinate to probe on
#   the bed.  Note that this refers to the nozzle position,
#   and take care that you do not define a point that will move
#   the probe off of the bed.  This parameter must be provided.
max_point: 140,130
#   An X,Y point defining the maximum coordinate to probe on
#   the bed.  Follow the same precautions as listed in min_point.
#   Also note that this does not necessarily define the last point
#   probed, only the maximum coordinate.  This parameter must be provided.
probe_count: 4,4
#   A comma separated pair of integer values (X,Y) defining the number
#   of points to probe along each axis. A single value is also valid,
#   in which case that value will be for both axes.  Default is 3,3
#   which probes a 3x3 grid.
#fade_start: 1.0
#   The z-axis position in which to start phasing z-adjustment out.
#   Default is 1.0.
#fade_end: 10.0
#   The z-axis position in which phase out is complete.  If this
#   value is less than or equal to fade_start then phasing out
#   is disabled. Default is 10.0.
#split_delta_z: .025
#   The amount of Z difference (in mm) along a move that will
#   trigger a split.  Default is .025.
#move_check_distance: 5.0
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
#mesh_pps: 2,2
#   A comma separated pair of integers (X,Y) defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed
#   point.  The user may enter a single value which will be applied
#   to both axes.  Default is 2,2.
#algorithm: lagrange
#   The interpolation algorthm to use.  May be either "langrange"
#   or "bicubic".  This option will not affect 3x3 grids, which
#   are forced to use lagrange sampling.  Default is lagrange.
#bicubic_tension: .2
#   When using the bicubic algoritm the tension parameter above
#   may be applied to change the amount of slope interpolated.
#   Larger numbers will increase the amount of slope, which
#   results in more curvature in the mesh. Default is .2.